 # WebAssembly Libraries & NPM Packages for React/Node.js

## 🔧 Core Integration Libraries

### 1. **wasm-pack** (Rust → Wasm)
The standard tool for building Rust-generated WebAssembly packages for JavaScript.

```bash
npm install -g wasm-pack
```

**Features:**
- Compiles Rust to Wasm
- Generates JavaScript bindings automatically
- Creates npm-ready packages
- TypeScript definitions included

**Usage:**
```bash
# Build for web
wasm-pack build --target web

# Build for Node.js
wasm-pack build --target nodejs

# Build for bundlers (Webpack, Rollup)
wasm-pack build --target bundler
```

**NPM Package Example:**
```json
{
  "name": "my-wasm-lib",
  "version": "0.1.0",
  "files": [
    "my_wasm_lib_bg.wasm",
    "my_wasm_lib.js",
    "my_wasm_lib.d.ts"
  ],
  "module": "my_wasm_lib.js",
  "types": "my_wasm_lib.d.ts"
}
```

---

### 2. **wasm-bindgen**
Low-level JavaScript ↔ Rust bindings for WebAssembly.

```toml
[dependencies]
wasm-bindgen = "0.2"
```

**Features:**
- Import JavaScript functions into Rust
- Export Rust functions to JavaScript
- Handle complex types (strings, objects, arrays)
- Async support with JS Promises

**Example:**
```rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
extern "C" {
    // Import JS console.log
    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);
}

#[wasm_bindgen]
pub fn greet(name: &str) {
    log(&format!("Hello, {}!", name));
}

// Async function
#[wasm_bindgen]
pub async fn fetch_data(url: String) -> Result<String, JsValue> {
    // Implementation
}
```

---

### 3. **@assemblyscript/loader**
Loader for AssemblyScript-generated WebAssembly modules.

```bash
npm install @assemblyscript/loader
```

**Usage:**
```javascript
import { instantiateStreaming } from "@assemblyscript/loader";

const wasmModule = await instantiateStreaming(
  fetch("./module.wasm")
);

const result = wasmModule.exports.add(5, 10);
```

---

### 4. **react-wasm**
Declarative WebAssembly integration for React.

```bash
npm install react-wasm
```

**Features:**
- React hooks for Wasm loading
- HOC pattern support
- Loading and error states
- Automatic cleanup

**Usage:**
```javascript
import { useWasm } from 'react-wasm';

function MyComponent() {
  const { loading, error, data } = useWasm({
    url: '/path/to/module.wasm',
    importObject: {
      env: {
        // Imports
      }
    }
  });

  if (loading) return <div>Loading Wasm...</div>;
  if (error) return <div>Error: {error.message}</div>;

  const result = data.instance.exports.calculate(42);
  return <div>Result: {result}</div>;
}
```

---

## 📦 Popular WebAssembly NPM Packages

### **Data Processing & Analytics**

#### 1. **duckdb-wasm**
SQL analytics database in WebAssembly.

```bash
npm install @duckdb/duckdb-wasm
```

```javascript
import * as duckdb from '@duckdb/duckdb-wasm';

const JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();
const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);
const worker = new Worker(bundle.mainWorker);
const logger = new duckdb.ConsoleLogger();
const db = new duckdb.AsyncDuckDB(logger, worker);
await db.instantiate(bundle.mainModule, bundle.pthreadWorker);

const conn = await db.connect();
await conn.query(`SELECT * FROM data WHERE value > 100`);
```

**Use Cases:**
- In-browser data analytics
- CSV/Parquet file processing
- Complex SQL queries on large datasets

---

#### 2. **pyodide**
Python runtime in WebAssembly with scientific libraries.

```bash
npm install pyodide
```

```javascript
import { loadPyodide } from 'pyodide';

const pyodide = await loadPyodide();
await pyodide.loadPackage(['numpy', 'pandas', 'matplotlib']);

pyodide.runPython(`
  import numpy as np
  import pandas as pd
  
  df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
  result = df.mean()
`);

const result = pyodide.globals.get('result');
```

**Included Packages:**
- NumPy, Pandas, Matplotlib
- SciPy, scikit-learn
- NetworkX, NLTK

---

#### 3. **apache-arrow**
Columnar data format with WebAssembly acceleration.

```bash
npm install apache-arrow
```

```javascript
import { Table } from 'apache-arrow';

const table = Table.from([
  { name: 'Alice', age: 30 },
  { name: 'Bob', age: 25 }
]);

const filtered = table.filter(row => row.age > 28);
```

---

### **Machine Learning & AI**

#### 4. **@tensorflow/tfjs-backend-wasm**
TensorFlow.js with WebAssembly backend.

```bash
npm install @tensorflow/tfjs-backend-wasm
```

```javascript
import * as tf from '@tensorflow/tfjs';
import '@tensorflow/tfjs-backend-wasm';

await tf.setBackend('wasm');
await tf.ready();

const model = await tf.loadLayersModel('model.json');
const prediction = model.predict(tf.tensor2d([[1, 2, 3, 4]]));
```

**Performance Gains:**
- 3-10x faster than JS backend
- Better for CPU inference
- Smaller bundle size than WebGL

---

#### 5. **onnxruntime-web**
ONNX model inference with WebAssembly.

```bash
npm install onnxruntime-web
```

```javascript
import * as ort from 'onnxruntime-web';

ort.env.wasm.wasmPaths = 'https://cdn.jsdelivr.net/npm/onnxruntime-web/dist/';

const session = await ort.InferenceSession.create('model.onnx');
const feeds = { input: new ort.Tensor('float32', [1, 2, 3, 4], [1, 4]) };
const results = await session.run(feeds);
```

---

#### 6. **transformers.js**
Hugging Face Transformers in WebAssembly.

```bash
npm install @xenova/transformers
```

```javascript
import { pipeline } from '@xenova/transformers';

// Sentiment analysis
const classifier = await pipeline('sentiment-analysis');
const result = await classifier('I love WebAssembly!');

// Text generation
const generator = await pipeline('text-generation', 'gpt2');
const output = await generator('Once upon a time');
```

---

### **Image & Video Processing**

#### 7. **opencv.js**
OpenCV computer vision library.

```bash
npm install opencv.js
```

```javascript
import cv from 'opencv.js';

const src = cv.imread('imageCanvas');
const dst = new cv.Mat();

// Convert to grayscale
cv.cvtColor(src, dst, cv.COLOR_RGBA2GRAY);

// Apply Gaussian blur
cv.GaussianBlur(dst, dst, new cv.Size(5, 5), 0);

cv.imshow('outputCanvas', dst);
```

---

#### 8. **@ffmpeg/ffmpeg**
Video processing in the browser.

```bash
npm install @ffmpeg/ffmpeg
```

```javascript
import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';

const ffmpeg = createFFmpeg({ log: true });
await ffmpeg.load();

ffmpeg.FS('writeFile', 'input.mp4', await fetchFile(videoFile));
await ffmpeg.run('-i', 'input.mp4', '-vf', 'scale=320:240', 'output.mp4');
const data = ffmpeg.FS('readFile', 'output.mp4');
```

---

#### 9. **sharp (Node.js)**
High-performance image processing for Node.js.

```bash
npm install sharp
```

```javascript
import sharp from 'sharp';

await sharp('input.jpg')
  .resize(300, 200)
  .grayscale()
  .toFile('output.jpg');
```

---

### **Compression & Encoding**

#### 10. **fflate**
Fast compression library with WebAssembly acceleration.

```bash
npm install fflate
```

```javascript
import { gzipSync, gunzipSync } from 'fflate';

const compressed = gzipSync(new TextEncoder().encode('Hello World'));
const decompressed = gunzipSync(compressed);
```

---

#### 11. **@msgpack/msgpack**
MessagePack serialization.

```bash
npm install @msgpack/msgpack
```

```javascript
import { encode, decode } from '@msgpack/msgpack';

const encoded = encode({ foo: 'bar', num: 42 });
const decoded = decode(encoded);
```

---

### **Cryptography**

#### 12. **libsodium-wrappers**
Modern cryptography library.

```bash
npm install libsodium-wrappers
```

```javascript
import sodium from 'libsodium-wrappers';

await sodium.ready;

const key = sodium.crypto_secretbox_keygen();
const nonce = sodium.randombytes_buf(sodium.crypto_secretbox_NONCEBYTES);
const ciphertext = sodium.crypto_secretbox_easy('message', nonce, key);
```

---

#### 13. **argon2-browser**
Password hashing in browser.

```bash
npm install argon2-browser
```

```javascript
import argon2 from 'argon2-browser';

const result = await argon2.hash({
  pass: 'password',
  salt: 'somesalt',
  time: 2,
  mem: 65536,
  hashLen: 32,
  parallelism: 1,
  type: argon2.ArgonType.Argon2id
});
```

---

### **Scientific Computing**

#### 14. **mathjs (with Wasm acceleration)**
Math library with optional Wasm backend.

```bash
npm install mathjs
```

```javascript
import * as math from 'mathjs';

const result = math.evaluate('12.7 cm to inch');
const matrix = math.matrix([[1, 2], [3, 4]]);
const det = math.det(matrix);
```

---

### **Data Visualization**

#### 15. **plotly.js**
Charting library with WebAssembly acceleration for large datasets.

```bash
npm install plotly.js-dist
```

```javascript
import Plotly from 'plotly.js-dist';

Plotly.newPlot('myDiv', [{
  x: [1, 2, 3, 4, 5],
  y: [1, 2, 4, 8, 16],
  type: 'scatter'
}]);
```

---

### **Game Development**

#### 16. **three.js (with Wasm physics)**
3D graphics library with optional physics engines.

```bash
npm install three
npm install ammo.js  # Physics engine in Wasm
```

---

### **Document Processing**

#### 17. **pdf.js**
PDF rendering with WebAssembly.

```bash
npm install pdfjs-dist
```

```javascript
import * as pdfjsLib from 'pdfjs-dist';

pdfjsLib.GlobalWorkerOptions.workerSrc = 'pdf.worker.js';

const pdf = await pdfjsLib.getDocument('document.pdf').promise;
const page = await pdf.getPage(1);
```

---

#### 18. **mammoth.js**
Convert Word documents to HTML.

```bash
npm install mammoth
```

---

## 🔄 Data Exchange Between JS and Wasm

### **1. Passing Primitives**

```rust
// Rust
#[wasm_bindgen]
pub fn add(a: i32, b: i32) -> i32 {
    a + b
}
```

```javascript
// JavaScript
const result = wasmModule.add(5, 10);
```

---

### **2. Passing Strings**

```rust
// Rust
#[wasm_bindgen]
pub fn greet(name: &str) -> String {
    format!("Hello, {}!", name)
}
```

```javascript
// JavaScript
const greeting = wasmModule.greet("Alice");
```

---

### **3. Passing Arrays/Typed Arrays**

```rust
// Rust
#[wasm_bindgen]
pub fn sum_array(arr: &[f64]) -> f64 {
    arr.iter().sum()
}
```

```javascript
// JavaScript
const arr = new Float64Array([1.5, 2.5, 3.5]);
const sum = wasmModule.sum_array(arr);
```

---

### **4. Passing Complex Objects**

```rust
// Rust
use wasm_bindgen::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
pub struct Person {
    name: String,
    age: u32,
}

#[wasm_bindgen]
pub fn process_person(person_js: JsValue) -> JsValue {
    let person: Person = serde_wasm_bindgen::from_value(person_js).unwrap();
    // Process person
    serde_wasm_bindgen::to_value(&person).unwrap()
}
```

```javascript
// JavaScript
const person = { name: "Alice", age: 30 };
const result = wasmModule.process_person(person);
```

---

### **5. Shared Memory (Advanced)**

```rust
// Rust
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn get_memory() -> JsValue {
    wasm_bindgen::memory()
}

#[wasm_bindgen]
pub fn allocate(size: usize) -> *mut u8 {
    let mut vec = Vec::with_capacity(size);
    let ptr = vec.as_mut_ptr();
    std::mem::forget(vec);
    ptr
}
```

```javascript
// JavaScript
const memory = wasmModule.get_memory();
const buffer = new Uint8Array(memory.buffer);

// Write data directly to Wasm memory
const ptr = wasmModule.allocate(1000);
buffer.set(data, ptr);
```

---

## 🚀 Performance Optimization Tips

### 1. **Batch Operations**
```javascript
// ❌ BAD: Multiple small calls
for (let i = 0; i < 1000; i++) {
  wasmModule.process(data[i]);
}

// ✅ GOOD: Single bulk call
wasmModule.processBatch(data);
```

### 2. **Use Typed Arrays**
```javascript
// ❌ BAD: Regular arrays
const data = [1, 2, 3, 4, 5];

// ✅ GOOD: Typed arrays (zero-copy)
const data = new Float32Array([1, 2, 3, 4, 5]);
```

### 3. **Minimize String Conversions**
```javascript
// ❌ BAD: Frequent string passing
wasmModule.processString(text);

// ✅ GOOD: Pass as bytes
const bytes = new TextEncoder().encode(text);
wasmModule.processBytes(bytes);
```

### 4. **Reuse Memory**
```javascript
// ❌ BAD: Allocating new memory each time
function process(data) {
  const ptr = wasmModule.allocate(data.length);
  // Use and forget
}

// ✅ GOOD: Reuse memory buffer
let memoryPtr = wasmModule.allocate(MAX_SIZE);
function process(data) {
  // Reuse memoryPtr
}
```

---

## 📚 Recommended Packages by Use Case

### **For React Apps:**
- `react-wasm` - Declarative loading
- `@tensorflow/tfjs-backend-wasm` - ML inference
- `duckdb-wasm` - Data analytics
- `opencv.js` - Image processing

### **For Node.js Backend:**
- `sharp` - Image processing
- `duckdb-wasm` - SQL analytics
- `libsodium` - Cryptography
- `argon2` - Password hashing

### **For Data Science:**
- `pyodide` - Python in browser
- `@tensorflow/tfjs` - Machine learning
- `apache-arrow` - Columnar data
- `plotly.js` - Visualization

### **For Games:**
- `three.js` + `ammo.js` - 3D graphics + physics
- `box2d-wasm` - 2D physics
- `rapier` - Physics engine

---

## 🔍 Finding More Packages

**Search NPM:**
```bash
npm search webassembly
npm search wasm
```

**Browse GitHub Topics:**
- `topic:webassembly`
- `topic:wasm`
- `topic:rust-wasm`

**Check Rust Crates:**
- https://crates.io - Search for `wasm-bindgen`
- Filter by categories: wasm, web-programming